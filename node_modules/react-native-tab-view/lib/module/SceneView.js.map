{"version":3,"sources":["SceneView.tsx"],"names":["React","View","StyleSheet","SceneView","state","loading","props","navigationState","index","handleEnter","value","setState","lazy","addListener","setTimeout","prevProps","prevState","removeListener","layout","style","focused","styles","route","width","absoluteFill","children","Component","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  SceneRendererProps,\n  EventEmitterProps,\n  NavigationState,\n  Route,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\ntype State = {\n  loading: boolean;\n};\n\nexport default class SceneView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static getDerivedStateFromProps(props: Props<Route>, state: State) {\n    if (state.loading && props.navigationState.index === props.index) {\n      // Always render the route when it becomes focused\n      return { loading: false };\n    }\n\n    return null;\n  }\n\n  state = {\n    loading: this.props.navigationState.index !== this.props.index,\n  };\n\n  componentDidMount() {\n    if (this.props.lazy) {\n      // If lazy mode is enabled, listen to when we enter screens\n      this.props.addListener('enter', this.handleEnter);\n    } else if (this.state.loading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      setTimeout(() => this.setState({ loading: false }), 0);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    if (\n      this.props.lazy !== prevProps.lazy ||\n      this.state.loading !== prevState.loading\n    ) {\n      // We only need the listener if the tab hasn't loaded yet and lazy is enabled\n      if (this.props.lazy && this.state.loading) {\n        this.props.addListener('enter', this.handleEnter);\n      } else {\n        this.props.removeListener('enter', this.handleEnter);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeListener('enter', this.handleEnter);\n  }\n\n  private handleEnter = (value: number) => {\n    const { index } = this.props;\n\n    // If we're entering the current route, we need to load it\n    if (value === index && this.state.loading) {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { navigationState, index, layout, style } = this.props;\n    const { loading } = this.state;\n\n    const focused = navigationState.index === index;\n\n    return (\n      <View\n        accessibilityElementsHidden={!focused}\n        importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n        style={[\n          styles.route,\n          // If we don't have the layout yet, make the focused screen fill the container\n          // This avoids delay before we are able to render pages side by side\n          layout.width\n            ? { width: layout.width }\n            : focused\n            ? StyleSheet.absoluteFill\n            : null,\n          style,\n        ]}\n      >\n        {// Only render the route only if it's either focused or layout is available\n        // When layout is not available, we must not render unfocused routes\n        // so that the focused route can fill the screen\n        focused || layout.width ? this.props.children({ loading }) : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}